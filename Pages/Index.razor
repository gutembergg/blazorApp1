@page "/"

@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider authenticationStateProvider
@inject System.DirectoryServices.AccountManagement.PrincipalContext principalContext

<!-- Ajoutez la directive using ici -->
@using System.Security.Claims;
@using System.DirectoryServices.AccountManagement


<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />


<h3>User informations Active Directory</h3>

<h4>SamAccountName: @UserDetails.SamAccountName</h4>
<h4>DisplayName: @UserDetails.DisplayName</h4>
<h4>EmailAddress: @UserDetails.EmailAddress</h4>


@code {
    private System.DirectoryServices.AccountManagement.UserPrincipal UserDetails { get; set; }

protected override async Task OnInitializedAsync()
{
    var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user.Identity.IsAuthenticated)
    {
        var emailClaim = user.FindFirst(ClaimTypes.Email);

        if (emailClaim != null)
        {
            // Recherche par e-mail
            using (var searcher = new PrincipalSearcher())
            {
                var userPrincipal = new UserPrincipal(principalContext)
                {
                    EmailAddress = emailClaim.Value
                };

                searcher.QueryFilter = userPrincipal;

              var searchResult = searcher.FindOne();

            if (searchResult != null)
            {
                var foundUser = searchResult as UserPrincipal;

                if (foundUser != null)
                {
                    UserDetails = foundUser;
                    Console.WriteLine($"UserDetails: {UserDetails}");
                    Console.WriteLine($"SamAccountName: {UserDetails.SamAccountName}");
                    Console.WriteLine($"DisplayName: {UserDetails.DisplayName}");
                    Console.WriteLine($"EmailAddress: {UserDetails.EmailAddress}");
                    
                    
                    /* Get user groups, commented because it takes a bit more time */
                    /* var userGroups = UserDetails.GetGroups(); */

                    /* if(userGroups !== null)
                    {
                        Console.WriteLine($"Groups: {string.Join(", ", userGroups.Select(group => group.Name))}");
                    } */
                }
            }

            }
        }
    }

    await base.OnInitializedAsync();
}


}