@inject AuthenticationStateProvider _authenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorApp1</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
          <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            Hello @Username
          </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
        <div class="nav-item px-3">
          <NavLink class="nav-link" href="Identity/Account/Logout">
            <span class="oi oi-logout" aria-hidden="true"></span> Logout
          </NavLink>
        </div>
    </nav>
</div>

@code {
  private bool collapseNavMenu = true;

  private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

  private void ToggleNavMenu()
  {
    collapseNavMenu = !collapseNavMenu;
  }

  string Username { get; set; } = "";

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      // --- first connection - does the user exist? If not, create user (with current user id) and lead to settings
      var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
      var user = authState.User;
      if (user != null && user.Identity.IsAuthenticated) {
        Username = user.Identity.Name;
      }
      StateHasChanged();
    }
    await base.OnAfterRenderAsync(firstRender);
  }
}
